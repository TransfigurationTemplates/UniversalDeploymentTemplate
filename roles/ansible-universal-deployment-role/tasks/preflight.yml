---
- name: Assert usage of systemd as an init system
  assert:
    that: ansible_service_mgr == 'systemd'
    msg: "This role only works with systemd"

- name: Get systemd version
  command: systemctl --version
  changed_when: false
  check_mode: false
  register: __systemd_version
  tags:
    - skip_ansible_lint

- name: Set systemd version fact
  set_fact:
    vm_systemd_version: "{{ __systemd_version.stdout_lines[0] | regex_replace('^systemd\\s(\\d+).*$', '\\1') }}"

- name: Naive assertion of proper listen address
  assert:
    that:
      - "':' in binary_bindaddr"

- name: Check if {{ binary_name }} is installed
  stat:
    path: "/usr/local/bin/{{ binary_name }}"
  register: __binary_is_installed
  tags:
    - binary_install


- name: Gather currently installed binary version (if any)
  command: "/usr/local/bin/{{ binary_name }} {{ binary_version_argument }}"
  args:
    warn: false
  changed_when: false
  register: __binary_current_version_output
  when: binary_supports_version and __binary_is_installed.stat.exists
  tags:
    - binary_install
    - skip_ansible_lint

- block:
    - name: Get latest release
      uri:
        url: "https://api.github.com/repos/{{ binary_github_usr_repo }}/releases/latest"
        method: GET
        return_content: true
        status_code: 200
        body_format: json
        validate_certs: false
        user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
        password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
      # no_log: "{{ not lookup('env', 'MOLECULE_DEBUG') | bool }}"
      register: _latest_release
      until: _latest_release.status == 200
      retries: 5

    - name: "Set binary version to {{ _latest_release.json.tag_name[1:] }}"
      set_fact:
        binary_version: "{{ _latest_release.json.tag_name[1:] }}"
  when: binary_version == "latest"
  delegate_to: localhost
  run_once: true